@model HealthApp.MVC.Areas.Admin.ViewModels.DoctorEditViewModel

@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="menu-buttons">
    <div class="back-button-container">
        <a asp-area="Admin" asp-controller="Doctors" asp-action="Index" class="btn btn-secondary"><i class="fi fi-sr-angle-small-left"></i></a>
    </div>

     <div class="delete-button-container"> 
         <form asp-action="Delete" asp-controller="Patients" method="post" onsubmit="return confirm('Are you sure you want to delete this doctor?');"> 
             @Html.AntiForgeryToken()
             <input type="hidden" name="id" value="@Model.Id" />
             <button type="submit" class="btn" style="border: none; box-shadow: none;"><i class="fi fi-sr-trash"></i></button>
         </form>
    </div>
</div>


<section class="edit-doctor-section">
    <h1>Edit Doctor</h1>

    <form asp-action="Edit" method="post" class="doctor-form">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="validation-errors">
                @foreach (var state in ViewData.ModelState.Values)
                {
                    foreach (var error in state.Errors)
                    {
                        <p>@error.ErrorMessage</p>
                    }
                }
            </div>
        }

        <input type="hidden" asp-for="Id" />

        <div class="form-group">
            <label asp-for="FirstName">First Name</label>
            <input asp-for="FirstName" class="form-control" />
            <span asp-validation-for="FirstName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="LastName">Last Name</label>
            <input asp-for="LastName" class="form-control" />
            <span asp-validation-for="LastName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Email"></label>
            <input asp-for="Email" class="form-control" />
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="NewPassword">New Password</label>
            <input asp-for="NewPassword" class="form-control" />
            <span asp-validation-for="NewPassword" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="ConfirmPassword">Confirm Password</label>
            <input asp-for="ConfirmPassword" class="form-control" />
            <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
        </div>

        <div class="form-group specialization-group">
            <label>Specializations</label>
            @if (Model.AllSpecializations != null)
            {
                foreach (var spec in Model.AllSpecializations)
                {
                    bool isChecked = Model.SelectedSpecializationIds != null && Model.SelectedSpecializationIds.Contains(spec.Id);
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox"
                               name="SelectedSpecializationIds"
                               value="@spec.Id"
                               id="spec_@spec.Id" @(isChecked ? "checked" : "") />
                        <label class="form-check-label" for="spec_@spec.Id">
                            @spec.Name
                        </label>
                    </div>
                }
            }
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </form>
</section>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
